// /Generated by CoffeeScript 1.6.2
var app, express, feedsapi, firebase, fork, getSearchResult, http, io, path, querystring, routes, server, url, user, validate;

getSearchResult = function(query) {
  return "searhc result of: " + query;
};

validate = function(data) {
  return data;
};

querystring = require("querystring");

express = require("express");

routes = require("./routes");

firebase = require("firebase");

user = require("./routes/user");

http = require("http");

path = require("path");

feedsapi = require("./api/feeds.js");

fork = require("child_process").fork;

app = express();

url = require("url");

querystring = require("querystring");

server = http.createServer(app);

io = require("socket.io").listen(server);

app.set("port", process.env.PORT || 3000);

app.set("views", __dirname + "/views");

app.set("view engine", "jade");

app.use(express.favicon());

app.use(express.logger("dev"));

app.use(express.bodyParser());

app.use(express.methodOverride());

app.use(app.router);

app.use(express["static"](path.join(__dirname, "public")));

app.enable("trust proxy");

if ("development" === app.get("env")) {
  app.use(express.errorHandler());
}

app.get("/", routes.index);

app.get("/users", user.list);

app.get("/api/feeds/note", function(req, res) {
  /*/feeds/note request
  */

  var note, params, urlData, validParams;

  console.log("feeds/note api");
  urlData = url.parse(req.url);
  params = querystring.parse(urlData.query);
  validParams = feedsapi.validateNoteParam(params);
  /*param validation
  */

  if (validParams) {
    note = new firebase("https://wiredancer.firebaseio.com/note");
    return note.once("value", function(snapshot) {
      var result;

      result = feedsapi.query(snapshot.val(), 'note', validParams);
      res.write(result);
      return res.end();
    });
  } else {
    res.write("Could not understand your request");
    return res.end();
  }
});

app.get("/api/feeds/user", function(req, res) {
  /*/feeds/user request
  */

  var note, params, urlData, validParams;

  console.log("feeds/user api");
  urlData = url.parse(req.url);
  params = querystring.parse(urlData.query);
  validParams = feedsapi.validateUserParam(params);
  /*param validation
  */

  if (validParams) {
    note = new firebase("https://wiredancer.firebaseio.com/user");
    return note.once("value", function(snapshot) {
      var result;

      result = feedsapi.query(snapshot.val(), 'user', validParams);
      res.write(result);
      return res.end();
    });
  } else {
    res.write("Could not understand your request");
    return res.end();
  }
});

server.listen(app.get("port"), function() {
  console.log("Express server listening on port " + app.get("port"));
  return 0;
});

io.sockets.on("connection", function(socket) {
  socket.send("hello from the game server");
  return socket.on("search", function(data) {
    return socket.emit("searchResult", getSearchResult(validate(data)));
  });
});
