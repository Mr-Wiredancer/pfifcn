// Generated by CoffeeScript 1.6.2
var firebase, getNoteHelper, getUserHelper, query, validateNoteParam, validateUserParam,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

firebase = require('firebase');

validateNoteParam = function(params) {
  var json, max_results, min_entry_date, skip;

  max_results = __indexOf.call(params, 'max_results') >= 0 ? Math.min(200, params['max_results']) : 20;
  skip = 0;
  /*TODO: should be added functionalities
  */

  min_entry_date = 0;
  /*TODO: Return only results with an entry_date greater than or equal to the specified timestamp, which should be in UTC in yyyy-mm-ddThh:mm:ssZ format. If this parameter is specified, results will be returned in forward chronological order.
  */

  json = true;
  /*this indicates should return a json format
  */

  return {
    "max_results": max_results,
    "skip": skip,
    "min_entry_date": min_entry_date,
    "json": json
  };
};

validateUserParam = function(params) {
  var json, max_results, min_entry_date, person_record_id, skip;

  max_results = __indexOf.call(params, 'max_results') >= 0 ? Math.min(200, params['max_results']) : 20;
  skip = 0;
  /*TODO: should be added functionalities
  */

  min_entry_date = 0;
  /*TODO: Return only results with an entry_date greater than or equal to the specified timestamp, which should be in UTC in yyyy-mm-ddThh:mm:ssZ format. If this parameter is specified, results will be returned in forward chronological order.
  */

  json = true;
  /*this indicates should return a json format
  */

  console.log(params);
  person_record_id = params['person_record_id'] ? params['person_record_id'] : null;
  /*Return only notes for this person record. This parameter is only valid for the note feed.
  */

  return {
    "max_results": max_results,
    "skip": skip,
    "min_entry_date": min_entry_date,
    "json": json,
    "person_record_id": person_record_id
  };
};

query = function(data, model, params) {
  if (model === !'user' && model === !'note') {
    return "could not undestand request";
  }
  switch (model) {
    case 'user':
      return getUserHelper(data, params['max_results'], params['skip'], params['min_entry_data'], params['json']);
    case 'note':
      return getUserHelper(data, params['max_results'], params['skip'], params['min_entry_data'], params['person_record_id'], params['json']);
  }
};

getNoteHelper = function(data, max_results, skip, min_entry_data, person_record_id, json) {
  return data;
};

getUserHelper = function(data, max_results, skip, min_entry_data, json) {
  return data;
};

module.exports.query = query;

module.exports.validateNoteParam = validateNoteParam;

module.exports.validateUserParam = validateUserParam;
